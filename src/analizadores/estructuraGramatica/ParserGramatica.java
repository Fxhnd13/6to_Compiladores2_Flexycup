
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores.estructuraGramatica;

import analizadores.objetos.componentes.NodoER.*;
import analizadores.objetos.TablaDeSimbolos;
import analizadores.objetos.Variable;
import analizadores.objetos.componentes.lexer.GeneradorAutomata;
import analizadores.objetos.componentes.lexer.PR;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserGramatica extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserGramatica() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserGramatica(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserGramatica(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\102\000\002\002\004\000\002\002\006\000\002\002" +
    "\005\000\002\003\004\000\002\003\003\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\006\000" +
    "\002\004\006\000\002\004\004\000\002\005\005\000\002" +
    "\005\005\000\002\021\004\000\002\021\003\000\002\022" +
    "\006\000\002\022\006\000\002\022\005\000\002\022\005" +
    "\000\002\022\005\000\002\022\005\000\002\022\006\000" +
    "\002\022\005\000\002\022\005\000\002\022\004\000\002" +
    "\023\004\000\002\023\004\000\002\023\004\000\002\023" +
    "\005\000\002\023\004\000\002\023\003\000\002\023\003" +
    "\000\002\023\003\000\002\023\003\000\002\023\003\000" +
    "\002\023\003\000\002\023\005\000\002\023\005\000\002" +
    "\023\003\000\002\023\003\000\002\023\003\000\002\006" +
    "\005\000\002\006\005\000\002\007\004\000\002\007\003" +
    "\000\002\010\006\000\002\010\007\000\002\010\004\000" +
    "\002\011\004\000\002\011\003\000\002\012\007\000\002" +
    "\012\004\000\002\013\004\000\002\013\003\000\002\014" +
    "\005\000\002\014\003\000\002\015\004\000\002\015\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\002\000\002\017\005\000\002\017\003\000\002" +
    "\020\003\000\002\020\002" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\016\003\011\004\004\005\012\006\007\007" +
    "\005\010\010\001\002\000\004\011\201\001\002\000\004" +
    "\011\176\001\002\000\020\003\171\004\004\005\012\006" +
    "\007\007\005\010\010\014\173\001\002\000\004\011\166" +
    "\001\002\000\004\011\163\001\002\000\006\014\023\026" +
    "\024\001\002\000\004\011\016\001\002\000\020\003\ufffd" +
    "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\014\ufffd\001" +
    "\002\000\004\002\015\001\002\000\004\002\001\001\002" +
    "\000\004\037\017\001\002\000\006\026\uffc8\037\uffc8\001" +
    "\002\000\006\026\022\037\021\001\002\000\006\026\uffc9" +
    "\037\uffc9\001\002\000\020\003\ufff9\004\ufff9\005\ufff9\006" +
    "\ufff9\007\ufff9\010\ufff9\014\ufff9\001\002\000\010\003\027" +
    "\032\032\037\026\001\002\000\020\003\ufff7\004\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\014\ufff7\001\002\000\004" +
    "\002\uffff\001\002\000\020\013\142\023\146\027\144\030" +
    "\147\031\143\035\150\036\145\001\002\000\006\014\140" +
    "\026\137\001\002\000\012\003\ufff3\014\ufff3\032\ufff3\037" +
    "\ufff3\001\002\000\012\003\063\014\065\032\032\037\026" +
    "\001\002\000\004\013\033\001\002\000\030\021\043\023" +
    "\037\024\035\027\040\030\036\031\044\033\034\035\041" +
    "\036\046\040\047\041\045\001\002\000\046\015\uffde\016" +
    "\uffde\017\uffde\020\uffde\021\uffde\022\uffde\023\uffde\024\uffde" +
    "\025\uffde\026\uffde\027\uffde\030\uffde\031\uffde\033\uffde\035" +
    "\uffde\036\uffde\040\uffde\041\uffde\001\002\000\030\021\043" +
    "\023\037\024\035\027\040\030\036\031\044\033\034\035" +
    "\041\036\046\040\047\041\045\001\002\000\046\015\uffe0" +
    "\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023\uffe0\024" +
    "\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\031\uffe0\033\uffe0" +
    "\035\uffe0\036\uffe0\040\uffe0\041\uffe0\001\002\000\046\015" +
    "\uffdb\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb" +
    "\024\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\031\uffdb\033" +
    "\uffdb\035\uffdb\036\uffdb\040\uffdb\041\uffdb\001\002\000\046" +
    "\015\uffe1\016\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\023" +
    "\uffe1\024\uffe1\025\uffe1\026\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\033\uffe1\035\uffe1\036\uffe1\040\uffe1\041\uffe1\001\002\000" +
    "\046\015\uffda\016\uffda\017\uffda\020\uffda\021\uffda\022\uffda" +
    "\023\uffda\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda\031" +
    "\uffda\033\uffda\035\uffda\036\uffda\040\uffda\041\uffda\001\002" +
    "\000\042\015\056\016\055\017\054\020\053\021\043\023" +
    "\037\024\035\026\060\027\040\030\036\031\044\033\034" +
    "\035\041\036\046\040\047\041\045\001\002\000\030\021" +
    "\043\023\037\024\035\027\040\030\036\031\044\033\034" +
    "\035\041\036\046\040\047\041\045\001\002\000\046\015" +
    "\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\022\uffdf\023\uffdf" +
    "\024\uffdf\025\uffdf\026\uffdf\027\uffdf\030\uffdf\031\uffdf\033" +
    "\uffdf\035\uffdf\036\uffdf\040\uffdf\041\uffdf\001\002\000\046" +
    "\015\uffe3\016\uffe3\017\uffe3\020\uffe3\021\uffe3\022\uffe3\023" +
    "\uffe3\024\uffe3\025\uffe3\026\uffe3\027\uffe3\030\uffe3\031\uffe3" +
    "\033\uffe3\035\uffe3\036\uffe3\040\uffe3\041\uffe3\001\002\000" +
    "\046\015\uffd9\016\uffd9\017\uffd9\020\uffd9\021\uffd9\022\uffd9" +
    "\023\uffd9\024\uffd9\025\uffd9\026\uffd9\027\uffd9\030\uffd9\031" +
    "\uffd9\033\uffd9\035\uffd9\036\uffd9\040\uffd9\041\uffd9\001\002" +
    "\000\046\015\uffe2\016\uffe2\017\uffe2\020\uffe2\021\uffe2\022" +
    "\uffe2\023\uffe2\024\uffe2\025\uffe2\026\uffe2\027\uffe2\030\uffe2" +
    "\031\uffe2\033\uffe2\035\uffe2\036\uffe2\040\uffe2\041\uffe2\001" +
    "\002\000\042\015\056\016\055\017\054\020\053\021\043" +
    "\022\051\023\037\024\035\027\040\030\036\031\044\033" +
    "\034\035\041\036\046\040\047\041\045\001\002\000\046" +
    "\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd\023" +
    "\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\033\uffdd\035\uffdd\036\uffdd\040\uffdd\041\uffdd\001\002\000" +
    "\046\015\056\016\055\017\054\020\053\021\043\022\uffe4" +
    "\023\037\024\035\025\uffe4\026\uffe4\027\040\030\036\031" +
    "\044\033\034\035\041\036\046\040\047\041\045\001\002" +
    "\000\030\021\043\023\037\024\035\027\040\030\036\031" +
    "\044\033\034\035\041\036\046\040\047\041\045\001\002" +
    "\000\046\015\uffe8\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022" +
    "\uffe8\023\uffe8\024\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8" +
    "\031\uffe8\033\uffe8\035\uffe8\036\uffe8\040\uffe8\041\uffe8\001" +
    "\002\000\046\015\uffe7\016\uffe7\017\uffe7\020\uffe7\021\uffe7" +
    "\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7\030" +
    "\uffe7\031\uffe7\033\uffe7\035\uffe7\036\uffe7\040\uffe7\041\uffe7" +
    "\001\002\000\046\015\uffe6\016\uffe6\017\uffe6\020\uffe6\021" +
    "\uffe6\022\uffe6\023\uffe6\024\uffe6\025\uffe6\026\uffe6\027\uffe6" +
    "\030\uffe6\031\uffe6\033\uffe6\035\uffe6\036\uffe6\040\uffe6\041" +
    "\uffe6\001\002\000\046\015\uffe5\016\uffe5\017\uffe5\020\uffe5" +
    "\021\043\022\uffe5\023\037\024\035\025\uffe5\026\uffe5\027" +
    "\uffe5\030\uffe5\031\uffe5\033\uffe5\035\uffe5\036\uffe5\040\uffe5" +
    "\041\uffe5\001\002\000\012\003\ufff1\014\ufff1\032\ufff1\037" +
    "\ufff1\001\002\000\042\015\056\016\055\017\054\020\053" +
    "\021\043\023\037\024\035\025\062\027\040\030\036\031" +
    "\044\033\034\035\041\036\046\040\047\041\045\001\002" +
    "\000\046\015\uffdc\016\uffdc\017\uffdc\020\uffdc\021\uffdc\022" +
    "\uffdc\023\uffdc\024\uffdc\025\uffdc\026\uffdc\027\uffdc\030\uffdc" +
    "\031\uffdc\033\uffdc\035\uffdc\036\uffdc\040\uffdc\041\uffdc\001" +
    "\002\000\004\026\137\001\002\000\012\003\ufff4\014\ufff4" +
    "\032\ufff4\037\ufff4\001\002\000\010\003\067\042\071\043" +
    "\072\001\002\000\012\003\uffd5\014\uffd5\042\uffd5\043\uffd5" +
    "\001\002\000\006\014\135\026\134\001\002\000\012\003" +
    "\112\014\113\042\071\043\072\001\002\000\012\037\uffc4" +
    "\044\076\045\075\046\077\001\002\000\004\042\074\001" +
    "\002\000\004\002\ufff6\001\002\000\012\037\uffc4\044\076" +
    "\045\075\046\077\001\002\000\004\037\uffc6\001\002\000" +
    "\004\037\uffc7\001\002\000\004\037\uffc5\001\002\000\004" +
    "\037\101\001\002\000\006\026\uffc2\047\uffc2\001\002\000" +
    "\006\026\104\047\103\001\002\000\004\037\105\001\002" +
    "\000\012\003\uffd3\014\uffd3\042\uffd3\043\uffd3\001\002\000" +
    "\006\026\uffc3\047\uffc3\001\002\000\004\037\101\001\002" +
    "\000\006\026\110\047\103\001\002\000\012\003\uffd4\014" +
    "\uffd4\042\uffd4\043\uffd4\001\002\000\012\003\uffd6\014\uffd6" +
    "\042\uffd6\043\uffd6\001\002\000\004\026\134\001\002\000" +
    "\006\003\116\037\114\001\002\000\004\012\122\001\002" +
    "\000\010\002\uffd8\003\116\037\114\001\002\000\004\026" +
    "\120\001\002\000\010\002\uffd0\003\uffd0\037\uffd0\001\002" +
    "\000\010\002\uffce\003\uffce\037\uffce\001\002\000\010\002" +
    "\uffd1\003\uffd1\037\uffd1\001\002\000\004\037\123\001\002" +
    "\000\012\011\132\026\uffca\034\uffca\037\uffca\001\002\000" +
    "\010\026\uffcc\034\uffcc\037\uffcc\001\002\000\010\026\uffc0" +
    "\034\127\037\123\001\002\000\010\026\uffcd\034\uffcd\037" +
    "\uffcd\001\002\000\004\026\uffc1\001\002\000\004\026\131" +
    "\001\002\000\010\002\uffcf\003\uffcf\037\uffcf\001\002\000" +
    "\004\037\133\001\002\000\010\026\uffcb\034\uffcb\037\uffcb" +
    "\001\002\000\012\003\uffd2\014\uffd2\042\uffd2\043\uffd2\001" +
    "\002\000\006\003\116\037\114\001\002\000\010\002\uffd7" +
    "\003\116\037\114\001\002\000\012\003\uffe9\014\uffe9\032" +
    "\uffe9\037\uffe9\001\002\000\010\003\067\042\071\043\072" +
    "\001\002\000\004\002\ufff5\001\002\000\030\021\043\023" +
    "\037\024\035\027\040\030\036\031\044\033\157\035\041" +
    "\036\046\040\047\041\045\001\002\000\004\026\156\001" +
    "\002\000\004\026\155\001\002\000\004\026\154\001\002" +
    "\000\004\026\153\001\002\000\004\026\152\001\002\000" +
    "\004\026\151\001\002\000\012\003\uffeb\014\uffeb\032\uffeb" +
    "\037\uffeb\001\002\000\012\003\uffef\014\uffef\032\uffef\037" +
    "\uffef\001\002\000\012\003\uffed\014\uffed\032\uffed\037\uffed" +
    "\001\002\000\012\003\uffea\014\uffea\032\uffea\037\uffea\001" +
    "\002\000\012\003\ufff0\014\ufff0\032\ufff0\037\ufff0\001\002" +
    "\000\012\003\uffee\014\uffee\032\uffee\037\uffee\001\002\000" +
    "\042\015\uffde\016\uffde\017\uffde\020\uffde\021\uffde\023\uffde" +
    "\024\uffde\026\uffde\027\uffde\030\uffde\031\uffde\033\uffde\035" +
    "\uffde\036\uffde\040\uffde\041\uffde\001\002\000\042\015\056" +
    "\016\055\017\054\020\053\021\043\023\037\024\035\026" +
    "\161\027\040\030\036\031\044\033\034\035\041\036\046" +
    "\040\047\041\045\001\002\000\012\003\ufff2\014\ufff2\032" +
    "\ufff2\037\ufff2\001\002\000\012\003\uffec\014\uffec\032\uffec" +
    "\037\uffec\001\002\000\004\037\164\001\002\000\004\026" +
    "\165\001\002\000\020\003\ufff8\004\ufff8\005\ufff8\006\ufff8" +
    "\007\ufff8\010\ufff8\014\ufff8\001\002\000\004\036\167\001" +
    "\002\000\004\026\170\001\002\000\020\003\ufffa\004\ufffa" +
    "\005\ufffa\006\ufffa\007\ufffa\010\ufffa\014\ufffa\001\002\000" +
    "\004\026\024\001\002\000\020\003\ufffe\004\ufffe\005\ufffe" +
    "\006\ufffe\007\ufffe\010\ufffe\014\ufffe\001\002\000\004\014" +
    "\174\001\002\000\010\003\027\032\032\037\026\001\002" +
    "\000\004\002\000\001\002\000\004\035\177\001\002\000" +
    "\004\026\200\001\002\000\020\003\ufffb\004\ufffb\005\ufffb" +
    "\006\ufffb\007\ufffb\010\ufffb\014\ufffb\001\002\000\004\037" +
    "\017\001\002\000\006\026\203\037\021\001\002\000\020" +
    "\003\ufffc\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc\014" +
    "\ufffc\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\201\000\010\002\013\003\005\004\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\004\171\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\015\017\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\005\024\021\030\022\027\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\022\063\001\001\000\002\001\001\000" +
    "\004\023\041\001\001\000\002\001\001\000\004\023\060" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\051\001\001\000\004" +
    "\023\047\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\051\001\001" +
    "\000\002\001\001\000\004\023\051\001\001\000\004\023" +
    "\056\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\023\051\001\001\000\002\001\001\000" +
    "\004\023\051\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\006\072\007\067\010\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\010\110" +
    "\001\001\000\004\016\105\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\016\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\101\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\106\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\114\012\116\001\001\000" +
    "\002\001\001\000\004\012\120\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\013\124\014\123\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\014\125\020\127\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\135\012\116\001\001\000\004\012\120\001\001" +
    "\000\002\001\001\000\010\006\140\007\067\010\065\001" +
    "\001\000\002\001\001\000\004\023\157\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\023\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\005\174" +
    "\021\030\022\027\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\201" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserGramatica$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserGramatica$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserGramatica$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
        private TablaDeSimbolos expresionesRegulares, simbolosGramatica;
        private List<String> listErrores;
        private GeneradorAutomata generadorAutomata;

        public ParserGramatica(LexerGramatica lex) { 
            super(lex);   
            listErrores = lex.getErrores();
            generadorAutomata = new GeneradorAutomata();
            expresionesRegulares = new TablaDeSimbolos();
            simbolosGramatica = new TablaDeSimbolos();
	}
        
        public void setAccion(String tipo, String mensaje, String accion){
            System.out.println(tipo+"         "+mensaje);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
            if(cur_token.toString().equals("#0")){
                listErrores.add("No se pudo recuperar y seguir analizando, no se encontraron más tokens, se llegó al final del archivo.");
            }else{
                listErrores.add("No se pudo recuperar y seguir analizando, error con el token: "+cur_token.value.toString());
            }
        }

        public void syntax_error(Symbol s){
            String message = "";
            StringBuilder m = new StringBuilder("Error:");
            String cadena = (String) s.value;
            int linea = s.left;
            int columna = s.right;
            switch(s.toString()){
                //anotamos los diferentes mensajes dependiendo del simbolo que causó el problema
            }
            listErrores.add("Se ha encontrado un error en la linea: "+linea+", columna: "+columna+" con la cadena "+cadena+"|Descripcion: "+message);
        }

        public List<String> getErrores(){return listErrores;}

        public void setErrores(List<String> e){listErrores = e;}

        public GeneradorAutomata getGeneradorAutomata(){ return generadorAutomata; }
        public TablaDeSimbolos getTablaDeER(){ return expresionesRegulares; }
        public TablaDeSimbolos getTablaDeSimbolosGramaticales(){ return simbolosGramatica;}



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserGramatica$actions {


  private final ParserGramatica parser;

  /** Constructor */
  CUP$ParserGramatica$actions(ParserGramatica parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserGramatica$do_action_part00000000(
    int                        CUP$ParserGramatica$act_num,
    java_cup.runtime.lr_parser CUP$ParserGramatica$parser,
    java.util.Stack            CUP$ParserGramatica$stack,
    int                        CUP$ParserGramatica$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserGramatica$result;

      /* select the action based on the action number */
      switch (CUP$ParserGramatica$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).value;
		RESULT = start_val;
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserGramatica$parser.done_parsing();
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= seccionInformacion SEPARADOR SEPARADOR seccionER 
            {
              Object RESULT =null;
		 System.out.println("Termino exitosamente"); 
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // s ::= error SEPARADOR seccionER 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // seccionInformacion ::= seccionInformacion dato 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("seccionInformacion",1, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // seccionInformacion ::= dato 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("seccionInformacion",1, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dato ::= PR_NOMBRE ASIGNACION_INF idCompuesto FIN_DE_LINEA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("dato",2, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dato ::= PR_LANZAMIENTO ASIGNACION_INF ENTERO FIN_DE_LINEA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("dato",2, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dato ::= PR_VERSION ASIGNACION_INF VERSION FIN_DE_LINEA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("dato",2, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dato ::= PR_AUTOR ASIGNACION_INF idCompuesto FIN_DE_LINEA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("dato",2, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // dato ::= PR_EXTENSION ASIGNACION_INF ID FIN_DE_LINEA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("dato",2, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // dato ::= error FIN_DE_LINEA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("dato",2, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // seccionER ::= expresionesRegulares SEPARADOR seccionSimbolos 
            {
              Object RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).value;
		
                                                generadorAutomata.setExpresionRegular(nodo);
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("seccionER",3, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // seccionER ::= error SEPARADOR seccionSimbolos 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("seccionER",3, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // expresionesRegulares ::= expresionesRegulares declaracionExpresionRegular 
            {
              Nodo RESULT =null;
		int nodosleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).left;
		int nodosright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).right;
		Nodo nodos = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).value;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.peek()).value;
		
                                                Nodo nodoUnion = new NodoHoja();
                                                if(nodos != null && nodo != null){
                                                    nodoUnion = new NodoDis(nodos, nodo);
                                                }
                                                RESULT = nodoUnion;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionesRegulares",15, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // expresionesRegulares ::= declaracionExpresionRegular 
            {
              Nodo RESULT =null;
		int nodoleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()).left;
		int nodoright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()).right;
		Nodo nodo = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.peek()).value;
		
                                                Nodo nodoSalida = new NodoHoja();
                                                if(nodo != null) nodoSalida = nodo;
                                                RESULT = nodoSalida;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionesRegulares",15, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // declaracionExpresionRegular ::= ID ASIGNACION_ER expresionRegular FIN_DE_LINEA 
            {
              Nodo RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).right;
		Nodo expresion = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).value;
		
                                                Nodo nodo = new NodoHoja();
                                                if(expresion != null) nodo = expresion;
                                                if(!expresionesRegulares.addVariable(new Variable(identificador, nodo))){
                                                    listErrores.add("Error: ya existe una expresion regular con el identificador: '"+identificador+"' declarado en <Linea: "+identificadorleft+", Columna: "+identificadorright+">");
                                                    nodo = new NodoHoja();
                                                }else{
                                                    generadorAutomata.asignarTipoToken(identificador, nodo);
                                                }
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("declaracionExpresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // declaracionExpresionRegular ::= IGNORAR ASIGNACION_ER expresionRegular FIN_DE_LINEA 
            {
              Nodo RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)).value;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).right;
		Nodo expresion = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).value;
		
                                                Nodo nodo = new NodoHoja();
                                                if(expresion != null) nodo = expresion;
                                                if(!expresionesRegulares.addVariable(new Variable(identificador, nodo))){
                                                    listErrores.add("Error: ya existe una expresion regular con el identificador: '"+identificador+"' declarado en <Linea: "+identificadorleft+", Columna: "+identificadorright+">");
                                                    nodo = new NodoHoja();
                                                }else{
                                                    generadorAutomata.asignarTipoToken(identificador, nodo);
                                                }
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("declaracionExpresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // declaracionExpresionRegular ::= ID SALTO_DE_LINEA FIN_DE_LINEA 
            {
              Nodo RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).value;
		
                                                Nodo nodo = new NodoHoja('\n');
                                                generadorAutomata.getAutomata().getPalabrasReservadas().add(new PR(identificador, "\n"));
                                                if(!expresionesRegulares.addVariable(new Variable(identificador, nodo))){
                                                    listErrores.add("Error: ya existe una expresion regular con el identificador: '"+identificador+"' declarado en <Linea: "+identificadorleft+", Columna: "+identificadorright+">");
                                                    nodo = new NodoHoja();
                                                }
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("declaracionExpresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // declaracionExpresionRegular ::= ID TABULACION FIN_DE_LINEA 
            {
              Nodo RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).value;
		
                                                Nodo nodo = new NodoHoja('\t');
                                                generadorAutomata.getAutomata().getPalabrasReservadas().add(new PR(identificador, "\t"));
                                                if(!expresionesRegulares.addVariable(new Variable(identificador, nodo))){
                                                    listErrores.add("Error: ya existe una expresion regular con el identificador: '"+identificador+"' declarado en <Linea: "+identificadorleft+", Columna: "+identificadorright+">");
                                                    nodo = new NodoHoja();
                                                }
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("declaracionExpresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // declaracionExpresionRegular ::= ID RETORNO FIN_DE_LINEA 
            {
              Nodo RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).value;
		
                                                Nodo nodo = new NodoHoja('\b');
                                                generadorAutomata.getAutomata().getPalabrasReservadas().add(new PR(identificador, "\b"));
                                                if(!expresionesRegulares.addVariable(new Variable(identificador, nodo))){
                                                    listErrores.add("Error: ya existe una expresion regular con el identificador: '"+identificador+"' declarado en <Linea: "+identificadorleft+", Columna: "+identificadorright+">");
                                                    nodo = new NodoHoja();
                                                }
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("declaracionExpresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // declaracionExpresionRegular ::= ID CARACTER_EXPLICITO FIN_DE_LINEA 
            {
              Nodo RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).value;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).value;
		
                                                Nodo nodo = new NodoHoja(caracter.charAt(0));
                                                generadorAutomata.getAutomata().getPalabrasReservadas().add(new PR(identificador, caracter));
                                                if(!expresionesRegulares.addVariable(new Variable(identificador, nodo))){
                                                    listErrores.add("Error: ya existe una expresion regular con el identificador: '"+identificador+"' declarado en <Linea: "+identificadorleft+", Columna: "+identificadorright+">");
                                                    nodo = new NodoHoja();
                                                }
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("declaracionExpresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // declaracionExpresionRegular ::= ID ASIGNACION_ER CADENA FIN_DE_LINEA 
            {
              Nodo RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)).value;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).value;
		
                                                Nodo nodo = new NodoConcat();
                                                generadorAutomata.agregarCadena(nodo, cadena.substring(1, cadena.length()-1));
                                                generadorAutomata.getAutomata().getPalabrasReservadas().add(new PR(identificador, cadena.substring(1, cadena.length()-1)));
                                                if(!expresionesRegulares.addVariable(new Variable(identificador, nodo))){
                                                    listErrores.add("Error: ya existe una expresion regular con el identificador: '"+identificador+"' declarado en <Linea: "+identificadorleft+", Columna: "+identificadorright+">");
                                                    nodo = new NodoHoja();
                                                }
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("declaracionExpresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracionExpresionRegular ::= ID ENTERO FIN_DE_LINEA 
            {
              Nodo RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).value;
		
                                                Nodo nodo = new NodoConcat();
                                                generadorAutomata.agregarCadena(nodo, valor);
                                                generadorAutomata.getAutomata().getPalabrasReservadas().add(new PR(identificador, valor));
                                                if(!expresionesRegulares.addVariable(new Variable(identificador, nodo))){
                                                    listErrores.add("Error: ya existe una expresion regular con el identificador: '"+identificador+"' declarado en <Linea: "+identificadorleft+", Columna: "+identificadorright+">");
                                                    nodo = new NodoHoja();
                                                }
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("declaracionExpresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // declaracionExpresionRegular ::= ID VERSION FIN_DE_LINEA 
            {
              Nodo RESULT =null;
		int identificadorleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).left;
		int identificadorright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).right;
		String identificador = (String)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).value;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).value;
		
                                                Nodo nodo = new NodoConcat();
                                                generadorAutomata.agregarCadena(nodo, valor);
                                                generadorAutomata.getAutomata().getPalabrasReservadas().add(new PR(identificador, valor));
                                                if(!expresionesRegulares.addVariable(new Variable(identificador, nodo))){
                                                    listErrores.add("Error: ya existe una expresion regular con el identificador: '"+identificador+"' declarado en <Linea: "+identificadorleft+", Columna: "+identificadorright+">");
                                                    nodo = new NodoHoja();
                                                }
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("declaracionExpresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // declaracionExpresionRegular ::= error FIN_DE_LINEA 
            {
              Nodo RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("declaracionExpresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expresionRegular ::= expresionRegular PUEDE_O_NO_PUEDE 
            {
              Nodo RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).right;
		Nodo expresion = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).value;
		
                                                Nodo nodo = (expresion != null)? new NodoQuiza(expresion) : new NodoQuiza();
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",17, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expresionRegular ::= expresionRegular CERO_O_MAS_VECES 
            {
              Nodo RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).right;
		Nodo expresion = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).value;
		
                                                Nodo nodo = (expresion != null)? new NodoAst(expresion) : new NodoAst();
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",17, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expresionRegular ::= expresionRegular UNA_O_MAS_VECES 
            {
              Nodo RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).right;
		Nodo expresion = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).value;
		
                                                Nodo nodo = (expresion != null)? new NodoMas(expresion) : new NodoMas();
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",17, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expresionRegular ::= expresionRegular O expresionRegular 
            {
              Nodo RESULT =null;
		int expresionIzquierdaleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).left;
		int expresionIzquierdaright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).right;
		Nodo expresionIzquierda = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)).value;
		int expresionDerechaleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()).left;
		int expresionDerecharight = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()).right;
		Nodo expresionDerecha = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.peek()).value;
		
                                                Nodo nodo = new NodoDis();
                                                if(expresionIzquierda != null && expresionDerecha != null){
                                                    nodo = new NodoDis(expresionIzquierda, expresionDerecha);
                                                }
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",17, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expresionRegular ::= expresionRegular expresionRegular 
            {
              Nodo RESULT =null;
		int expresionIzquierdaleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).left;
		int expresionIzquierdaright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).right;
		Nodo expresionIzquierda = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).value;
		int expresionDerechaleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()).left;
		int expresionDerecharight = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()).right;
		Nodo expresionDerecha = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.peek()).value;
		
                                                Nodo nodo = new NodoConcat();
                                                if(expresionIzquierda != null && expresionDerecha != null){
                                                    nodo = new NodoConcat(expresionIzquierda, expresionDerecha);
                                                }
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",17, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expresionRegular ::= RANGO_LETRAS_MIN 
            {
              Nodo RESULT =null;
		
                                                Nodo nodo = new NodoDis();
                                                generadorAutomata.agregarRango(nodo, 0);
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",17, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresionRegular ::= RANGO_NUMEROS 
            {
              Nodo RESULT =null;
		
                                                Nodo nodo = new NodoDis();
                                                generadorAutomata.agregarRango(nodo, 0);
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",17, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresionRegular ::= SALTO_DE_LINEA 
            {
              Nodo RESULT =null;
		
                                                Nodo nodo = new NodoHoja('\n');
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",17, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expresionRegular ::= TABULACION 
            {
              Nodo RESULT =null;
		
                                                Nodo nodo = new NodoHoja('\t');
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",17, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expresionRegular ::= RETORNO 
            {
              Nodo RESULT =null;
		
                                                Nodo nodo = new NodoHoja('\b');
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",17, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expresionRegular ::= CADENA 
            {
              Nodo RESULT =null;
		int cadenaleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()).left;
		int cadenaright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()).right;
		String cadena = (String)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.peek()).value;
		
                                                Nodo nodo = new NodoConcat();
                                                generadorAutomata.agregarCadena(nodo, cadena.substring(1, cadena.length()-1));
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",17, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresionRegular ::= COR_A expresionRegular COR_C 
            {
              Nodo RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).right;
		Nodo expresion = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).value;
		
                                                Nodo nodo = new NodoHoja();
                                                if(expresion != null) nodo = expresion;
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",17, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresionRegular ::= PAR_A expresionRegular PAR_C 
            {
              Nodo RESULT =null;
		int expresionleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).left;
		int expresionright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).right;
		Nodo expresion = (Nodo)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).value;
		
                                                Nodo nodo = new NodoHoja();
                                                if(expresion != null) nodo = expresion;
                                                RESULT = expresion;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",17, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresionRegular ::= CARACTER_EXPLICITO 
            {
              Nodo RESULT =null;
		int caracterleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()).left;
		int caracterright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()).right;
		String caracter = (String)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.peek()).value;
		
                                                Nodo nodo = new NodoHoja();
                                                if(caracter != null) nodo = new NodoHoja(caracter.charAt(0));
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",17, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresionRegular ::= ENTERO 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.peek()).value;
		
                                                Nodo nodo = new NodoHoja();
                                                if(valor != null) generadorAutomata.agregarCadena(nodo, valor.substring(1, valor.length()-1));
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",17, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresionRegular ::= VERSION 
            {
              Nodo RESULT =null;
		int valorleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()).left;
		int valorright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()).right;
		String valor = (String)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.peek()).value;
		
                                                Nodo nodo = new NodoHoja();
                                                if(valor != null) generadorAutomata.agregarCadena(nodo, valor.substring(1, valor.length()-1));
                                                RESULT = nodo;
                                            
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",17, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // seccionSimbolos ::= declaracionesSimbolos SEPARADOR seccionGramatica 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("seccionSimbolos",4, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // seccionSimbolos ::= error SEPARADOR seccionGramatica 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("seccionSimbolos",4, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // declaracionesSimbolos ::= declaracionesSimbolos declaracionSimbolo 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("declaracionesSimbolos",5, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // declaracionesSimbolos ::= declaracionSimbolo 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("declaracionesSimbolos",5, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // declaracionSimbolo ::= PR_TERMINAL tipoSimbolo listadoIds FIN_DE_LINEA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("declaracionSimbolo",6, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // declaracionSimbolo ::= PR_NO PR_TERMINAL tipoSimbolo listadoIds FIN_DE_LINEA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("declaracionSimbolo",6, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // declaracionSimbolo ::= error FIN_DE_LINEA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("declaracionSimbolo",6, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // seccionGramatica ::= seccionGramatica produccion 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("seccionGramatica",7, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // seccionGramatica ::= produccion 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("seccionGramatica",7, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // produccion ::= ID ASIGNACION_GRAMA listadoSimbolos codigoJava FIN_DE_LINEA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("produccion",8, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // produccion ::= error FIN_DE_LINEA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("produccion",8, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // listadoSimbolos ::= listadoSimbolos simboloProduccion 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("listadoSimbolos",9, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // listadoSimbolos ::= simboloProduccion 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("listadoSimbolos",9, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // simboloProduccion ::= ID ASIGNACION_INF ID 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("simboloProduccion",10, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // simboloProduccion ::= ID 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("simboloProduccion",10, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // idCompuesto ::= idCompuesto ID 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("idCompuesto",11, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // idCompuesto ::= ID 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("idCompuesto",11, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // tipoSimbolo ::= PR_ENTERO 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("tipoSimbolo",12, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // tipoSimbolo ::= PR_REAL 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("tipoSimbolo",12, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // tipoSimbolo ::= PR_CADENA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("tipoSimbolo",12, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // tipoSimbolo ::= 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("tipoSimbolo",12, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // listadoIds ::= listadoIds COMA ID 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("listadoIds",13, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // listadoIds ::= ID 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("listadoIds",13, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // codigoJava ::= JAVA_CODE 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("codigoJava",14, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // codigoJava ::= 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("codigoJava",14, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserGramatica$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserGramatica$do_action(
    int                        CUP$ParserGramatica$act_num,
    java_cup.runtime.lr_parser CUP$ParserGramatica$parser,
    java.util.Stack            CUP$ParserGramatica$stack,
    int                        CUP$ParserGramatica$top)
    throws java.lang.Exception
    {
              return CUP$ParserGramatica$do_action_part00000000(
                               CUP$ParserGramatica$act_num,
                               CUP$ParserGramatica$parser,
                               CUP$ParserGramatica$stack,
                               CUP$ParserGramatica$top);
    }
}

}
