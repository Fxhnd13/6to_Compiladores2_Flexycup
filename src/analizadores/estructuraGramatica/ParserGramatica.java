
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores.estructuraGramatica;

import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserGramatica extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserGramatica() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserGramatica(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserGramatica(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\062\000\002\002\004\000\002\002\005\000\002\003" +
    "\004\000\002\003\003\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\006\000" +
    "\002\005\004\000\002\005\003\000\002\006\004\000\002" +
    "\006\005\000\002\007\007\000\002\010\004\000\002\010" +
    "\003\000\002\011\005\000\002\011\003\000\002\012\003" +
    "\000\002\012\002\000\002\013\004\000\002\013\005\000" +
    "\002\014\006\000\002\015\003\000\002\015\004\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\016" +
    "\002\000\002\017\005\000\002\017\003\000\002\020\004" +
    "\000\002\020\003\000\002\021\004\000\002\021\004\000" +
    "\002\024\005\000\002\022\004\000\002\022\004\000\002" +
    "\022\004\000\002\022\005\000\002\022\004\000\002\022" +
    "\005\000\002\022\003\000\002\022\003\000\002\022\003" +
    "\000\002\022\003\000\002\022\005\000\002\022\005\000" +
    "\002\023\003\000\002\023\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\014\004\006\005\011\006\005\007\013\010" +
    "\012\001\002\000\016\004\006\005\011\006\005\007\013" +
    "\010\012\014\036\001\002\000\004\011\033\001\002\000" +
    "\004\011\030\001\002\000\016\004\ufffe\005\ufffe\006\ufffe" +
    "\007\ufffe\010\ufffe\014\ufffe\001\002\000\004\002\027\001" +
    "\002\000\004\011\022\001\002\000\004\011\017\001\002" +
    "\000\004\011\014\001\002\000\004\034\015\001\002\000" +
    "\004\025\016\001\002\000\016\004\ufffa\005\ufffa\006\ufffa" +
    "\007\ufffa\010\ufffa\014\ufffa\001\002\000\004\036\020\001" +
    "\002\000\004\025\021\001\002\000\016\004\ufff9\005\ufff9" +
    "\006\ufff9\007\ufff9\010\ufff9\014\ufff9\001\002\000\004\036" +
    "\023\001\002\000\006\025\ufff7\036\ufff7\001\002\000\006" +
    "\025\026\036\025\001\002\000\006\025\ufff8\036\ufff8\001" +
    "\002\000\016\004\ufffc\005\ufffc\006\ufffc\007\ufffc\010\ufffc" +
    "\014\ufffc\001\002\000\004\002\001\001\002\000\004\036" +
    "\023\001\002\000\006\025\032\036\025\001\002\000\016" +
    "\004\ufffd\005\ufffd\006\ufffd\007\ufffd\010\ufffd\014\ufffd\001" +
    "\002\000\004\035\034\001\002\000\004\025\035\001\002" +
    "\000\016\004\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb\014" +
    "\ufffb\001\002\000\006\031\044\036\040\001\002\000\016" +
    "\004\uffff\005\uffff\006\uffff\007\uffff\010\uffff\014\uffff\001" +
    "\002\000\004\013\101\001\002\000\006\002\000\036\065" +
    "\001\002\000\010\014\131\031\044\036\040\001\002\000" +
    "\010\014\uffe1\031\uffe1\036\uffe1\001\002\000\004\013\101" +
    "\001\002\000\010\014\046\041\047\042\051\001\002\000" +
    "\004\036\065\001\002\000\012\036\uffea\043\uffea\044\uffea" +
    "\045\uffea\001\002\000\010\014\uffed\041\uffed\042\uffed\001" +
    "\002\000\004\041\064\001\002\000\012\036\uffe5\043\054" +
    "\044\053\045\055\001\002\000\004\036\uffe7\001\002\000" +
    "\004\036\uffe8\001\002\000\004\036\uffe6\001\002\000\004" +
    "\036\057\001\002\000\006\025\uffe3\046\uffe3\001\002\000" +
    "\006\025\062\046\061\001\002\000\004\036\063\001\002" +
    "\000\010\014\uffeb\041\uffeb\042\uffeb\001\002\000\006\025" +
    "\uffe4\046\uffe4\001\002\000\012\036\uffe9\043\uffe9\044\uffe9" +
    "\045\uffe9\001\002\000\004\012\067\001\002\000\006\002" +
    "\ufff5\036\ufff5\001\002\000\004\036\070\001\002\000\012" +
    "\011\077\025\ufff0\033\ufff0\036\ufff0\001\002\000\010\025" +
    "\uffee\033\073\036\070\001\002\000\010\025\ufff2\033\ufff2" +
    "\036\ufff2\001\002\000\004\025\uffef\001\002\000\004\025" +
    "\076\001\002\000\010\025\ufff3\033\ufff3\036\ufff3\001\002" +
    "\000\006\002\ufff4\036\ufff4\001\002\000\004\036\100\001" +
    "\002\000\010\025\ufff1\033\ufff1\036\ufff1\001\002\000\016" +
    "\021\106\023\105\026\107\027\110\030\104\032\111\001" +
    "\002\000\010\014\uffdf\031\uffdf\036\uffdf\001\002\000\030" +
    "\015\123\016\122\017\121\020\120\021\106\023\105\025" +
    "\130\026\107\027\110\030\104\032\111\001\002\000\034" +
    "\015\uffd5\016\uffd5\017\uffd5\020\uffd5\021\uffd5\022\uffd5\023" +
    "\uffd5\024\uffd5\025\uffd5\026\uffd5\027\uffd5\030\uffd5\032\uffd5" +
    "\001\002\000\016\021\106\023\105\026\107\027\110\030" +
    "\104\032\111\001\002\000\022\021\106\023\105\026\107" +
    "\027\110\030\104\032\111\037\115\040\114\001\002\000" +
    "\034\015\uffd7\016\uffd7\017\uffd7\020\uffd7\021\uffd7\022\uffd7" +
    "\023\uffd7\024\uffd7\025\uffd7\026\uffd7\027\uffd7\030\uffd7\032" +
    "\uffd7\001\002\000\034\015\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\032\uffd6\001\002\000\034\015\uffd4\016\uffd4" +
    "\017\uffd4\020\uffd4\021\uffd4\022\uffd4\023\uffd4\024\uffd4\025" +
    "\uffd4\026\uffd4\027\uffd4\030\uffd4\032\uffd4\001\002\000\004" +
    "\022\125\001\002\000\030\015\123\016\122\017\121\020" +
    "\120\021\106\022\116\023\105\026\107\027\110\030\104" +
    "\032\111\001\002\000\004\022\uffd1\001\002\000\004\022" +
    "\uffd0\001\002\000\034\015\uffd3\016\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\026\uffd3\027" +
    "\uffd3\030\uffd3\032\uffd3\001\002\000\034\015\123\016\122" +
    "\017\121\020\120\021\106\022\uffd9\023\105\024\uffd9\025" +
    "\uffd9\026\107\027\110\030\104\032\111\001\002\000\016" +
    "\021\106\023\105\026\107\027\110\030\104\032\111\001" +
    "\002\000\034\015\uffdd\016\uffdd\017\uffdd\020\uffdd\021\uffdd" +
    "\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030" +
    "\uffdd\032\uffdd\001\002\000\034\015\uffdc\016\uffdc\017\uffdc" +
    "\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024\uffdc\025\uffdc\026" +
    "\uffdc\027\uffdc\030\uffdc\032\uffdc\001\002\000\034\015\uffdb" +
    "\016\uffdb\017\uffdb\020\uffdb\021\uffdb\022\uffdb\023\uffdb\024" +
    "\uffdb\025\uffdb\026\uffdb\027\uffdb\030\uffdb\032\uffdb\001\002" +
    "\000\034\015\uffda\016\uffda\017\uffda\020\uffda\021\106\022" +
    "\uffda\023\105\024\uffda\025\uffda\026\uffda\027\uffda\030\uffda" +
    "\032\uffda\001\002\000\034\015\uffd8\016\uffd8\017\uffd8\020" +
    "\uffd8\021\uffd8\022\uffd8\023\uffd8\024\uffd8\025\uffd8\026\uffd8" +
    "\027\uffd8\030\uffd8\032\uffd8\001\002\000\030\015\123\016" +
    "\122\017\121\020\120\021\106\023\105\024\127\026\107" +
    "\027\110\030\104\032\111\001\002\000\034\015\uffd2\016" +
    "\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2" +
    "\025\uffd2\026\uffd2\027\uffd2\030\uffd2\032\uffd2\001\002\000" +
    "\010\014\uffde\031\uffde\036\uffde\001\002\000\006\041\047" +
    "\042\051\001\002\000\010\014\uffe2\031\uffe2\036\uffe2\001" +
    "\002\000\010\014\uffec\041\uffec\042\uffec\001\002\000\006" +
    "\002\ufff6\036\ufff6\001\002\000\010\014\uffe0\031\uffe0\036" +
    "\uffe0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\133\000\010\002\007\003\003\004\006\001\001\000" +
    "\004\004\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\030\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\006\040\013\044\020\041" +
    "\021\042\001\001\000\002\001\001\000\004\024\134\001" +
    "\001\000\004\007\133\001\001\000\004\021\131\001\001" +
    "\000\002\001\001\000\004\024\101\001\001\000\006\014" +
    "\047\015\051\001\001\000\004\007\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\055\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\057\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\010\070\011\071\001\001\000\002\001\001" +
    "\000\006\011\074\012\073\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\102\001\001\000\002\001\001\000\004\022\116\001\001" +
    "\000\002\001\001\000\004\022\125\001\001\000\006\022" +
    "\112\023\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\022\116\001\001\000\004\022\123\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\022\116\001\001\000\002\001\001\000\004\022\116\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\014\132" +
    "\015\051\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserGramatica$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserGramatica$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserGramatica$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
        private List<String> listErrores;

        public ParserGramatica(LexerGramatica lex) { 
            super(lex);   
            listErrores = lex.getErrores();
	}
        
        public void setAccion(String tipo, String mensaje, String accion){
            System.out.println(tipo+"         "+mensaje);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
            System.err.println("No se pudo recuperar y seguir analizando, error con el token: "+cur_token.value);
        }

        public void syntax_error(Symbol s){
            String message = "";
            StringBuilder m = new StringBuilder("Error:");
            String cadena = (String) s.value;
            int linea = s.left;
            int columna = s.right;
            switch(s.toString()){
                //anotamos los diferentes mensajes dependiendo del simbolo que causó el problema
            }
            listErrores.add("Se ha encontrado un error en la linea: "+linea+", columna: "+columna+" con la cadena "+cadena+"|Descripcion: "+message);
        }

        public List<String> getErrores(){
            return listErrores;
        }

        public void setErrores(List<String> e){
            listErrores = e;
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserGramatica$actions {


  private final ParserGramatica parser;

  /** Constructor */
  CUP$ParserGramatica$actions(ParserGramatica parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserGramatica$do_action_part00000000(
    int                        CUP$ParserGramatica$act_num,
    java_cup.runtime.lr_parser CUP$ParserGramatica$parser,
    java.util.Stack            CUP$ParserGramatica$stack,
    int                        CUP$ParserGramatica$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserGramatica$result;

      /* select the action based on the action number */
      switch (CUP$ParserGramatica$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= s EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)).value;
		RESULT = start_val;
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserGramatica$parser.done_parsing();
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // s ::= informacion SEPARADOR gramatica 
            {
              String RESULT =null;
		 RESULT = "Se completo Exitosamente"; 
              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("s",0, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // informacion ::= informacion dato 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("informacion",1, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // informacion ::= dato 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("informacion",1, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // dato ::= PR_NOMBRE ASIGNACION_INF listadoIds FIN_DE_LINEA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("dato",2, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // dato ::= PR_AUTOR ASIGNACION_INF listadoIds FIN_DE_LINEA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("dato",2, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // dato ::= PR_VERSION ASIGNACION_INF VERSION FIN_DE_LINEA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("dato",2, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // dato ::= PR_LANZAMIENTO ASIGNACION_INF ENTERO FIN_DE_LINEA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("dato",2, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // dato ::= PR_EXTENSION ASIGNACION_INF ID FIN_DE_LINEA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("dato",2, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // listadoIds ::= listadoIds ID 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("listadoIds",3, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // listadoIds ::= ID 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("listadoIds",3, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // gramatica ::= gramatica reglaGramatical 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("gramatica",4, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // gramatica ::= simbolos SEPARADOR reglaGramatical 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("gramatica",4, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // reglaGramatical ::= ID ASIGNACION_GRAMA listadoSimbolos codigoJava FIN_DE_LINEA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("reglaGramatical",5, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-4)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // listadoSimbolos ::= listadoSimbolos simbolo 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("listadoSimbolos",6, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // listadoSimbolos ::= simbolo 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("listadoSimbolos",6, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // simbolo ::= ID ASIGNACION_INF ID 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("simbolo",7, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // simbolo ::= ID 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("simbolo",7, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // codigoJava ::= JAVA_CODE 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("codigoJava",8, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // codigoJava ::= 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("codigoJava",8, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // simbolos ::= simbolos declaracionSimbolos 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("simbolos",9, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // simbolos ::= expresiones SEPARADOR declaracionSimbolos 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("simbolos",9, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // declaracionSimbolos ::= tipoSimbolo tipoDato listadoIdsConComa FIN_DE_LINEA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("declaracionSimbolos",10, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-3)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // tipoSimbolo ::= PR_TERMINAL 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("tipoSimbolo",11, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // tipoSimbolo ::= PR_NO PR_TERMINAL 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("tipoSimbolo",11, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // tipoDato ::= PR_ENTERO 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("tipoDato",12, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // tipoDato ::= PR_REAL 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("tipoDato",12, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // tipoDato ::= PR_CADENA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("tipoDato",12, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // tipoDato ::= 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("tipoDato",12, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // listadoIdsConComa ::= listadoIdsConComa COMA ID 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("listadoIdsConComa",13, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // listadoIdsConComa ::= ID 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("listadoIdsConComa",13, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expresiones ::= expresiones declaracionExpresion 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresiones",14, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expresiones ::= declaracionExpresion 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresiones",14, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // declaracionExpresion ::= ID restoDeclaracionExpresion 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("declaracionExpresion",15, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // declaracionExpresion ::= IGNORAR restoDeclaracionExpresion 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("declaracionExpresion",15, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // restoDeclaracionExpresion ::= ASIGNACION_ER expresionRegular FIN_DE_LINEA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("restoDeclaracionExpresion",18, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expresionRegular ::= expresionRegular PUEDE_O_NO_PUEDE 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expresionRegular ::= expresionRegular CERO_O_MAS_VECES 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expresionRegular ::= expresionRegular UNA_O_MAS_VECES 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expresionRegular ::= expresionRegular O expresionRegular 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expresionRegular ::= expresionRegular expresionRegular 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-1)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // expresionRegular ::= COR_A rango COR_C 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // expresionRegular ::= SALTO_DE_LINEA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // expresionRegular ::= TABULACION 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // expresionRegular ::= RETORNO 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expresionRegular ::= CADENA 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expresionRegular ::= COR_A expresionRegular COR_C 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expresionRegular ::= PAR_A expresionRegular PAR_C 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("expresionRegular",16, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.elementAt(CUP$ParserGramatica$top-2)), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // rango ::= RANGO_LETRAS_MIN 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("rango",17, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // rango ::= RANGO_NUMEROS 
            {
              Object RESULT =null;

              CUP$ParserGramatica$result = parser.getSymbolFactory().newSymbol("rango",17, ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserGramatica$stack.peek()), RESULT);
            }
          return CUP$ParserGramatica$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserGramatica$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserGramatica$do_action(
    int                        CUP$ParserGramatica$act_num,
    java_cup.runtime.lr_parser CUP$ParserGramatica$parser,
    java.util.Stack            CUP$ParserGramatica$stack,
    int                        CUP$ParserGramatica$top)
    throws java.lang.Exception
    {
              return CUP$ParserGramatica$do_action_part00000000(
                               CUP$ParserGramatica$act_num,
                               CUP$ParserGramatica$parser,
                               CUP$ParserGramatica$stack,
                               CUP$ParserGramatica$top);
    }
}

}
