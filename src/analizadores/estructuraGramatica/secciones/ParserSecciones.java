
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analizadores.estructuraGramatica.secciones;

import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class ParserSecciones extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public ParserSecciones() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public ParserSecciones(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ParserSecciones(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\021\000\002\002\004\000\002\002\005\000\002\002" +
    "\005\000\002\002\003\000\002\003\005\000\002\003\004" +
    "\000\002\003\003\000\002\004\005\000\002\004\005\000" +
    "\002\004\003\000\002\005\005\000\002\005\005\000\002" +
    "\005\003\000\002\006\003\000\002\006\003\000\002\007" +
    "\005\000\002\007\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\040\000\006\003\005\004\004\001\002\000\010\002" +
    "\ufff1\005\ufff1\006\ufff1\001\002\000\006\002\ufffe\005\041" +
    "\001\002\000\004\002\040\001\002\000\006\005\010\006" +
    "\011\001\002\000\010\003\014\004\004\005\015\001\002" +
    "\000\004\004\012\001\002\000\010\002\ufff2\005\ufff2\006" +
    "\ufff2\001\002\000\004\002\000\001\002\000\004\002\ufffb" +
    "\001\002\000\006\003\020\004\004\001\002\000\006\005" +
    "\017\006\011\001\002\000\006\003\020\004\004\001\002" +
    "\000\006\002\ufff8\005\035\001\002\000\006\005\023\006" +
    "\011\001\002\000\004\002\ufffd\001\002\000\006\003\024" +
    "\004\004\001\002\000\006\002\ufff5\005\033\001\002\000" +
    "\004\002\ufffa\001\002\000\006\005\027\006\011\001\002" +
    "\000\006\003\030\004\004\001\002\000\004\002\ufff3\001" +
    "\002\000\004\002\ufff7\001\002\000\006\002\ufff4\006\011" +
    "\001\002\000\006\003\030\004\004\001\002\000\004\002" +
    "\ufff6\001\002\000\006\003\024\004\004\001\002\000\004" +
    "\002\ufff9\001\002\000\004\002\ufffc\001\002\000\004\002" +
    "\001\001\002\000\010\003\014\004\004\005\015\001\002" +
    "\000\004\002\uffff\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\040\000\006\002\005\007\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\003\012\007\015\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\004\036\007\020\001\001\000\002\001\001\000\006\004" +
    "\021\007\020\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\005\024\007\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\006\030\007\031\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\006\033\007\031\001\001" +
    "\000\002\001\001\000\006\005\035\007\025\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\003\041\007\015\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ParserSecciones$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ParserSecciones$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ParserSecciones$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public ParserSecciones(LexerSecciones lex) { 
        super(lex);   
    }

    public void unrecovered_syntax_error(Symbol cur_token){
        System.err.println("No se pudo recuperar y seguir analizando "+cur_token.value);
    }

    public void syntax_error(Symbol s){
        String message = "";
        StringBuilder m = new StringBuilder("Error:");
        String cadena = (String) s.value;
        int linea = s.left;
        int columna = s.right;
        switch(s.toString()){
            
        }
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$ParserSecciones$actions {


  private final ParserSecciones parser;

  /** Constructor */
  CUP$ParserSecciones$actions(ParserSecciones parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$ParserSecciones$do_action_part00000000(
    int                        CUP$ParserSecciones$act_num,
    java_cup.runtime.lr_parser CUP$ParserSecciones$parser,
    java.util.Stack            CUP$ParserSecciones$stack,
    int                        CUP$ParserSecciones$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ParserSecciones$result;

      /* select the action based on the action number */
      switch (CUP$ParserSecciones$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-1)).right;
		List<String> start_val = (List<String>)((java_cup.runtime.Symbol) CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-1)).value;
		RESULT = start_val;
              CUP$ParserSecciones$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ParserSecciones$parser.done_parsing();
          return CUP$ParserSecciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= sections SEPARADOR resto1 
            {
              List<String> RESULT =null;
		int informacionleft = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)).left;
		int informacionright = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)).right;
		String informacion = (String)((java_cup.runtime.Symbol) CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)).value;
		int seccionesleft = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).left;
		int seccionesright = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).right;
		List<String> secciones = (List<String>)((java_cup.runtime.Symbol) CUP$ParserSecciones$stack.peek()).value;
		
                        if(secciones == null){
                            secciones = new ArrayList<String>();
                            if(informacion != null) secciones.add(informacion);
                        }else{
                            secciones.add(0, informacion);
                        }
                        RESULT = secciones;
                    
              CUP$ParserSecciones$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), RESULT);
            }
          return CUP$ParserSecciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= error SEPARADOR resto1 
            {
              List<String> RESULT =null;
		int seccionesleft = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).left;
		int seccionesright = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).right;
		List<String> secciones = (List<String>)((java_cup.runtime.Symbol) CUP$ParserSecciones$stack.peek()).value;
		
                        if(secciones == null) secciones = new ArrayList<String>();
                        RESULT = secciones;
                    
              CUP$ParserSecciones$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), RESULT);
            }
          return CUP$ParserSecciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // S ::= error 
            {
              List<String> RESULT =null;
		
                        RESULT = new ArrayList<String>();
                    
              CUP$ParserSecciones$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), RESULT);
            }
          return CUP$ParserSecciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // resto1 ::= sections SEPARADOR resto2 
            {
              List<String> RESULT =null;
		int codigoUsuarioleft = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)).left;
		int codigoUsuarioright = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)).right;
		String codigoUsuario = (String)((java_cup.runtime.Symbol) CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)).value;
		int seccionesleft = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).left;
		int seccionesright = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).right;
		List<String> secciones = (List<String>)((java_cup.runtime.Symbol) CUP$ParserSecciones$stack.peek()).value;
		
                        if(secciones == null){
                            secciones = new ArrayList<String>();
                            if(codigoUsuario != null) secciones.add(codigoUsuario);
                        }else{
                            secciones.add(0, codigoUsuario);
                        }
                        RESULT = secciones;
                    
              CUP$ParserSecciones$result = parser.getSymbolFactory().newSymbol("resto1",1, ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), RESULT);
            }
          return CUP$ParserSecciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // resto1 ::= SEPARADOR resto2 
            {
              List<String> RESULT =null;
		int seccionesleft = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).left;
		int seccionesright = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).right;
		List<String> secciones = (List<String>)((java_cup.runtime.Symbol) CUP$ParserSecciones$stack.peek()).value;
		
                        if(secciones == null) secciones = new ArrayList<String>();
                        RESULT = secciones;
                    
              CUP$ParserSecciones$result = parser.getSymbolFactory().newSymbol("resto1",1, ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-1)), ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), RESULT);
            }
          return CUP$ParserSecciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // resto1 ::= error 
            {
              List<String> RESULT =null;
		
                        RESULT = new ArrayList<String>();
                    
              CUP$ParserSecciones$result = parser.getSymbolFactory().newSymbol("resto1",1, ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), RESULT);
            }
          return CUP$ParserSecciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // resto2 ::= sections SEPARADOR resto3 
            {
              List<String> RESULT =null;
		int expresionesRegularesleft = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)).left;
		int expresionesRegularesright = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)).right;
		String expresionesRegulares = (String)((java_cup.runtime.Symbol) CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)).value;
		int seccionesleft = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).left;
		int seccionesright = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).right;
		List<String> secciones = (List<String>)((java_cup.runtime.Symbol) CUP$ParserSecciones$stack.peek()).value;
		
                        if(secciones == null){
                            secciones = new ArrayList<String>();
                            if(expresionesRegulares != null) secciones.add(expresionesRegulares);
                        }else{
                            secciones.add(0, expresionesRegulares);
                        }
                        RESULT = secciones;
                    
              CUP$ParserSecciones$result = parser.getSymbolFactory().newSymbol("resto2",2, ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), RESULT);
            }
          return CUP$ParserSecciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // resto2 ::= error SEPARADOR resto3 
            {
              List<String> RESULT =null;
		int seccionesleft = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).left;
		int seccionesright = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).right;
		List<String> secciones = (List<String>)((java_cup.runtime.Symbol) CUP$ParserSecciones$stack.peek()).value;
		
                        if(secciones == null) secciones = new ArrayList<String>();
                        RESULT = secciones;
                    
              CUP$ParserSecciones$result = parser.getSymbolFactory().newSymbol("resto2",2, ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), RESULT);
            }
          return CUP$ParserSecciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // resto2 ::= error 
            {
              List<String> RESULT =null;
		
                        RESULT = new ArrayList<String>();
                    
              CUP$ParserSecciones$result = parser.getSymbolFactory().newSymbol("resto2",2, ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), RESULT);
            }
          return CUP$ParserSecciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // resto3 ::= sections SEPARADOR resto4 
            {
              List<String> RESULT =null;
		int simbolosleft = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)).left;
		int simbolosright = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)).right;
		String simbolos = (String)((java_cup.runtime.Symbol) CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)).value;
		int seccionesleft = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).left;
		int seccionesright = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).right;
		List<String> secciones = (List<String>)((java_cup.runtime.Symbol) CUP$ParserSecciones$stack.peek()).value;
		
                        if(secciones == null){
                            secciones = new ArrayList<String>();
                            if(simbolos != null) secciones.add(simbolos);
                        }else{
                            secciones.add(0, simbolos);
                        }
                        RESULT = secciones;
                    
              CUP$ParserSecciones$result = parser.getSymbolFactory().newSymbol("resto3",3, ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), RESULT);
            }
          return CUP$ParserSecciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // resto3 ::= error SEPARADOR resto4 
            {
              List<String> RESULT =null;
		int seccionesleft = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).left;
		int seccionesright = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).right;
		List<String> secciones = (List<String>)((java_cup.runtime.Symbol) CUP$ParserSecciones$stack.peek()).value;
		
                        if(secciones == null) secciones = new ArrayList<String>();
                        RESULT = secciones;
                    
              CUP$ParserSecciones$result = parser.getSymbolFactory().newSymbol("resto3",3, ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), RESULT);
            }
          return CUP$ParserSecciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // resto3 ::= error 
            {
              List<String> RESULT =null;
		
                        RESULT = new ArrayList<String>();
                    
              CUP$ParserSecciones$result = parser.getSymbolFactory().newSymbol("resto3",3, ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), RESULT);
            }
          return CUP$ParserSecciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // resto4 ::= sections 
            {
              List<String> RESULT =null;
		int reglasGramaticalesleft = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).left;
		int reglasGramaticalesright = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).right;
		String reglasGramaticales = (String)((java_cup.runtime.Symbol) CUP$ParserSecciones$stack.peek()).value;
		
                        List<String> secciones = new ArrayList<String>();
                        secciones.add(reglasGramaticales);
                        RESULT = secciones;
                    
              CUP$ParserSecciones$result = parser.getSymbolFactory().newSymbol("resto4",4, ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), RESULT);
            }
          return CUP$ParserSecciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // resto4 ::= error 
            {
              List<String> RESULT =null;
		
                        RESULT = new ArrayList<String>();
                    
              CUP$ParserSecciones$result = parser.getSymbolFactory().newSymbol("resto4",4, ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), RESULT);
            }
          return CUP$ParserSecciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // sections ::= sections SEPARADOR_UNITARIO SECCION 
            {
              String RESULT =null;
		int masContenidoleft = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)).left;
		int masContenidoright = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)).right;
		String masContenido = (String)((java_cup.runtime.Symbol) CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)).value;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$ParserSecciones$stack.peek()).value;
		
                        if(masContenido == null) masContenido = "";
                        if(contenido == null) contenido = "";
                        RESULT = masContenido+"%"+contenido;
                    
              CUP$ParserSecciones$result = parser.getSymbolFactory().newSymbol("sections",5, ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.elementAt(CUP$ParserSecciones$top-2)), ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), RESULT);
            }
          return CUP$ParserSecciones$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // sections ::= SECCION 
            {
              String RESULT =null;
		int contenidoleft = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).left;
		int contenidoright = ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()).right;
		String contenido = (String)((java_cup.runtime.Symbol) CUP$ParserSecciones$stack.peek()).value;
		
                        if(contenido == null) contenido ="";
                        RESULT = contenido;
                    
              CUP$ParserSecciones$result = parser.getSymbolFactory().newSymbol("sections",5, ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), ((java_cup.runtime.Symbol)CUP$ParserSecciones$stack.peek()), RESULT);
            }
          return CUP$ParserSecciones$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$ParserSecciones$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$ParserSecciones$do_action(
    int                        CUP$ParserSecciones$act_num,
    java_cup.runtime.lr_parser CUP$ParserSecciones$parser,
    java.util.Stack            CUP$ParserSecciones$stack,
    int                        CUP$ParserSecciones$top)
    throws java.lang.Exception
    {
              return CUP$ParserSecciones$do_action_part00000000(
                               CUP$ParserSecciones$act_num,
                               CUP$ParserSecciones$parser,
                               CUP$ParserSecciones$stack,
                               CUP$ParserSecciones$top);
    }
}

}
