package analizadores.estructuraGramatica;

import java.util.List;
import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

action code {::}

parser code {:
    
        private List<String> listErrores;

        public ParserGramatica(LexerGramatica lex) { 
            super(lex);   
            listErrores = lex.getErrores();
	}
        
        public void setAccion(String tipo, String mensaje, String accion){
            System.out.println(tipo+"         "+mensaje);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
            System.err.println("No se pudo recuperar y seguir analizando, error con el token: "+cur_token.value);
        }

        public void syntax_error(Symbol s){
            String message = "";
            StringBuilder m = new StringBuilder("Error:");
            String cadena = (String) s.value;
            int linea = s.left;
            int columna = s.right;
            switch(s.toString()){
                //anotamos los diferentes mensajes dependiendo del simbolo que caus√≥ el problema
            }
            listErrores.add("Se ha encontrado un error en la linea: "+linea+", columna: "+columna+" con la cadena "+cadena+"|Descripcion: "+message);
        }

        public List<String> getErrores(){
            return listErrores;
        }

        public void setErrores(List<String> e){
            listErrores = e;
        }
:}

/* terminales y no terminales */

terminal                                    PR_NOMBRE, PR_AUTOR, PR_VERSION, PR_LANZAMIENTO, PR_EXTENSION, ASIGNACION_INF, ASIGNACION_GRAMA;
terminal                                    ASIGNACION_ER, SEPARADOR, UNA_O_MAS_VECES, CERO_O_MAS_VECES, PUEDE_O_NO_PUEDE, O, COR_A, COR_C;
terminal                                    PAR_A, PAR_C, FIN_DE_LINEA, SALTO_DE_LINEA, TABULACION, RETORNO, IGNORAR, CADENA, JAVA_CODE, ENTERO;
terminal                                    VERSION, ID, RANGO_NUMEROS, RANGO_LETRAS_MIN, PR_TERMINAL, PR_NO, PR_ENTERO, PR_REAL, PR_CADENA, COMA;

non terminal String                         s;
non terminal                                informacion, dato, listadoIds, gramatica, reglaGramatical, listadoSimbolos, simbolo, codigoJava;
non terminal                                simbolos, declaracionSimbolos, tipoSimbolo, tipoDato, listadoIdsConComa, expresiones, declaracionExpresion;
non terminal                                expresionRegular, rango, restoDeclaracionExpresion;

/* precedencia */

precedence left     SALTO_DE_LINEA, TABULACION, RETORNO, CADENA;
precedence left     UNA_O_MAS_VECES, CERO_O_MAS_VECES, PUEDE_O_NO_PUEDE;
precedence left     O;
precedence left     PAR_A, COR_A;

/* gramatica */

start with s;

s::=                                        informacion SEPARADOR gramatica {: RESULT = "Se completo Exitosamente"; :}
                                            ;

informacion::=                              informacion dato
                                            | dato
                                            ;

dato::=                                     PR_NOMBRE ASIGNACION_INF listadoIds FIN_DE_LINEA
                                            |PR_AUTOR ASIGNACION_INF listadoIds FIN_DE_LINEA
                                            |PR_VERSION ASIGNACION_INF VERSION FIN_DE_LINEA
                                            |PR_LANZAMIENTO ASIGNACION_INF ENTERO FIN_DE_LINEA
                                            |PR_EXTENSION ASIGNACION_INF ID FIN_DE_LINEA
                                            ;

listadoIds::=                               listadoIds ID
                                            |ID
                                            ;

gramatica::=                                gramatica reglaGramatical
                                            |simbolos SEPARADOR reglaGramatical
                                            ;

reglaGramatical::=                          ID ASIGNACION_GRAMA listadoSimbolos codigoJava FIN_DE_LINEA
                                            ;

listadoSimbolos::=                          listadoSimbolos simbolo
                                            |simbolo
                                            ;

simbolo::=                                  ID ASIGNACION_INF ID
                                            |ID
                                            ;

codigoJava::=                               JAVA_CODE
                                            |
                                            ;

simbolos::=                                 simbolos declaracionSimbolos
                                            |expresiones SEPARADOR declaracionSimbolos
                                            ;

declaracionSimbolos::=                      tipoSimbolo tipoDato listadoIdsConComa FIN_DE_LINEA
                                            ;

tipoSimbolo::=                              PR_TERMINAL
                                            |PR_NO PR_TERMINAL
                                            ;

tipoDato::=                                 PR_ENTERO
                                            |PR_REAL
                                            |PR_CADENA
                                            |
                                            ;

listadoIdsConComa::=                        listadoIdsConComa COMA ID
                                            |ID
                                            ;

expresiones::=                              expresiones declaracionExpresion
                                            |declaracionExpresion
                                            ;

declaracionExpresion::=                     ID restoDeclaracionExpresion
                                            |IGNORAR restoDeclaracionExpresion
                                            ;

restoDeclaracionExpresion::=                ASIGNACION_ER expresionRegular FIN_DE_LINEA
                                            ;

expresionRegular::=                         expresionRegular PUEDE_O_NO_PUEDE
                                            |expresionRegular CERO_O_MAS_VECES
                                            |expresionRegular UNA_O_MAS_VECES
                                            |expresionRegular O expresionRegular
                                            |expresionRegular expresionRegular
                                            |COR_A rango COR_C
                                            |SALTO_DE_LINEA 
                                            |TABULACION
                                            |RETORNO
                                            |CADENA
                                            |COR_A expresionRegular COR_C
                                            |PAR_A expresionRegular PAR_C
                                            ;

rango::=                                    RANGO_LETRAS_MIN
                                            |RANGO_NUMEROS
                                            ;