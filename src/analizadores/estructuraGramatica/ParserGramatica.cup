package analizadores.estructuraGramatica;
 
import analizadores.objetos.componentes.NodoER.*;
import analizadores.objetos.TablaDeSimbolos;
import analizadores.objetos.Variable;
import analizadores.objetos.componentes.lexer.GeneradorAutomata;
import analizadores.objetos.componentes.lexer.PR;
import analizadores.objetos.componentes.parser.GeneradorParser;
import analizadores.objetos.componentes.parser.Produccion;
import analizadores.objetos.componentes.parser.Simbolo;
import java.util.ArrayList;
import java.util.List;
import java_cup.runtime.Symbol;

action code {::}

parser code {:
    
        private TablaDeSimbolos expresionesRegulares, simbolosGramatica;
        private List<String> listErrores, cadenasTemporales;
        private GeneradorAutomata generadorAutomata;
        private GeneradorParser generadorParser;

        public ParserGramatica(LexerGramatica lex) { 
            super(lex);   
            listErrores = lex.getErrores();
            generadorAutomata = new GeneradorAutomata();
            generadorParser = new GeneradorParser();
            expresionesRegulares = new TablaDeSimbolos();
            simbolosGramatica = new TablaDeSimbolos();
            cadenasTemporales = new ArrayList<String>();
	}
        
        public void setAccion(String tipo, String mensaje, String accion){
            System.out.println(tipo+"         "+mensaje);
        }

        public void unrecovered_syntax_error(Symbol cur_token){
            if(cur_token.toString().equals("#0")){
                listErrores.add("No se pudo recuperar y seguir analizando, no se encontraron más tokens, se llegó al final del archivo.");
            }else{
                listErrores.add("No se pudo recuperar y seguir analizando, error con el token: "+cur_token.value.toString());
            }
        }

        public void syntax_error(Symbol s){
            String message = "";
            StringBuilder m = new StringBuilder("Error: ");
            String cadena = (String) s.value;
            int linea = s.left;
            int columna = s.right;
            switch(s.toString()){
                case "#1":{ message = " No se esperaba la cadena ¿error? "; break;}
                case "#2": case "#3": case "#4": case "#5": case "#6": { 
                    message = " No se esperaba la palabra reservada '"+cadena+"'"; break;  
                }
                case "#7": case "#8": case "#9":{ message = " No se esperaba una asignacion del tipo '"+cadena+"'"; break; }
                case "#10": { message = " No se esperaba un separador de seccion '%%'"; break; }
                case "#12": case "#13": case "#14": { message = " No se esperaba el operador de expresiones regulares '"+cadena+"'"; break;}
                case "#15": case "#16": case "#18": case "#19": { message = " No se esperaba un caracter de agrupacion '"+cadena+"'"; break; }
                //case #17:{ message = " No se esperaba un caracter explicito '"+cadena+"'"; break;}
                //case #20:{ message = " No se esperaba un fin de linea ';'"; break; }
                //case #21:{ message = " No se esperaba un salto de linea '\\n'"; break; }
                //case #22:{ message = " No se esperaba una tabulacion '\\t'"; break; }
                //case #23:{ message = " No se esperaba un retorno '\\b'"; break; }
                //case #24:{ message = " No se esperaba el simbolo '&'; break; }
                //case #25:{ message = " No se esperaba una cadena <"+cadena+">"; break; }
                //case #26:{ message = " No se esperaba codigo java"; break;}
                //case #27:{ message = " No se esperaba un entero '"+cadena+"'"; break;}
                //case #28:{ message = " No se esperaba una version '"+cadena+"'"; break;}
                //7case #29:{ message = " No se esperaba un identificador '"+cadena+"'"; break;}
                //case #30:{ message = " No se esperaba un rango de numeros"; break; }
                //case #31:{ message = " No se esperaba un rango de letras"; break; }
                //case #32:{}
                //case #33:{}
                //case #34:{}
                //case #35:{}
                //case #36:{}
                //case #37:{}
            }
            listErrores.add("Se ha encontrado un error en la linea: "+linea+", columna: "+columna+" con la cadena "+cadena+"|Descripcion: "+message);
        }

        public List<String> getErrores(){return listErrores;}

        public void setErrores(List<String> e){listErrores = e;}

        public GeneradorAutomata getGeneradorAutomata(){ return generadorAutomata; }
        public TablaDeSimbolos getTablaDeER(){ return expresionesRegulares; }
        public TablaDeSimbolos getTablaDeSimbolosGramaticales(){ return simbolosGramatica;}

:}

/* terminales y no terminales */

terminal String                                    PR_NOMBRE, PR_AUTOR, PR_VERSION, PR_LANZAMIENTO, PR_EXTENSION, ASIGNACION_INF, ASIGNACION_GRAMA;
terminal String                                    ASIGNACION_ER, SEPARADOR, UNA_O_MAS_VECES, CERO_O_MAS_VECES, PUEDE_O_NO_PUEDE, O, COR_A, COR_C, CARACTER_EXPLICITO;
terminal String                                    PAR_A, PAR_C, FIN_DE_LINEA, SALTO_DE_LINEA, TABULACION, RETORNO, IGNORAR, CADENA, JAVA_CODE, ENTERO;
terminal String                                    VERSION, ID, RANGO_NUMEROS, RANGO_LETRAS_MIN, PR_TERMINAL, PR_NO, PR_ENTERO, PR_REAL, PR_CADENA, COMA;
terminal String                                    ID_T, ID_NT;

non terminal                                s, seccionInformacion, dato, seccionER;
non terminal                                seccionSimbolos, declaracionesSimbolos, declaracionSimbolo, seccionGramatica;
non terminal                                produccion, idCompuesto, tipoSimbolo, codigoJava;
non terminal List<String>                   listadoIdsMinus, listadoIdsMayus;
non terminal List<Simbolo>                  listadoSimbolos;
non terminal Simbolo                        simboloProduccion;
non terminal Nodo                           expresionesRegulares, declaracionExpresionRegular, expresionRegular;

/* precedencia */

precedence left     SALTO_DE_LINEA, TABULACION, RETORNO, CADENA;
precedence left     O, RANGO_LETRAS_MIN, RANGO_NUMEROS, ENTERO, VERSION, ID_T;
precedence left     CARACTER_EXPLICITO;
precedence left     UNA_O_MAS_VECES, CERO_O_MAS_VECES, PUEDE_O_NO_PUEDE;
precedence left     PAR_A, COR_A, PAR_C, COR_C;

/* GRAMATICA */

start with s;

s::=                                        seccionInformacion SEPARADOR SEPARADOR seccionER {: System.out.println("Termino exitosamente"); :}
                                            |error SEPARADOR seccionER
                                            ;

seccionInformacion::=                       seccionInformacion dato
                                            |dato
                                            ;

dato::=                                     PR_NOMBRE ASIGNACION_INF idCompuesto FIN_DE_LINEA
                                            |PR_LANZAMIENTO ASIGNACION_INF ENTERO FIN_DE_LINEA
                                            |PR_VERSION ASIGNACION_INF VERSION FIN_DE_LINEA
                                            |PR_AUTOR ASIGNACION_INF idCompuesto FIN_DE_LINEA
                                            |PR_EXTENSION ASIGNACION_INF ID FIN_DE_LINEA
                                            |error FIN_DE_LINEA
                                            ;

seccionER::=                                expresionesRegulares:nodo SEPARADOR seccionSimbolos {:
                                                generadorAutomata.setExpresionRegular(nodo);
                                            :}
                                            |error SEPARADOR seccionSimbolos
                                            ;

expresionesRegulares::=                     expresionesRegulares:nodos declaracionExpresionRegular:nodo {:
                                                Nodo nodoUnion = new NodoHoja();
                                                if(nodos != null && nodo != null){
                                                    nodoUnion = new NodoDis(nodos, nodo);
                                                }
                                                RESULT = nodoUnion;
                                            :}
                                            |declaracionExpresionRegular:nodo{:
                                                Nodo nodoSalida = new NodoHoja();
                                                if(nodo != null) nodoSalida = nodo;
                                                RESULT = nodoSalida;
                                            :}
                                            ;

declaracionExpresionRegular::=              ID_T:identificador ASIGNACION_ER expresionRegular:expresion FIN_DE_LINEA {:
                                                Nodo nodo = new NodoHoja();
                                                if(expresion != null) nodo = expresion;
                                                if(!expresionesRegulares.addVariable(new Variable(identificador, nodo))){
                                                    listErrores.add("Error: ya existe una expresion regular con el identificador: '"+identificador+"' declarado en <Linea: "+identificadorleft+", Columna: "+identificadorright+">");
                                                    nodo = new NodoHoja();
                                                }else{
                                                    generadorAutomata.asignarTipoToken(identificador, nodo);
                                                    for(String cadena : cadenasTemporales){
                                                        generadorAutomata.getAutomata().getPalabrasReservadas().add(new PR(identificador, cadena));
                                                    }
                                                    cadenasTemporales.clear();
                                                }
                                                RESULT = nodo;
                                            :}
                                            |IGNORAR:identificador ASIGNACION_ER expresionRegular:expresion FIN_DE_LINEA {:
                                                Nodo nodo = new NodoHoja();
                                                if(expresion != null) nodo = expresion;
                                                if(!expresionesRegulares.addVariable(new Variable(identificador, nodo))){
                                                    listErrores.add("Error: ya existe una expresion regular con el identificador: '"+identificador+"' declarado en <Linea: "+identificadorleft+", Columna: "+identificadorright+">");
                                                    nodo = new NodoHoja();
                                                }else{
                                                    generadorAutomata.asignarTipoToken(identificador, nodo);
                                                }
                                                RESULT = nodo;
                                            :}
                                            |error FIN_DE_LINEA
                                            ;

expresionRegular::=                         expresionRegular:expresion PUEDE_O_NO_PUEDE {:
                                                Nodo nodo = (expresion != null)? new NodoQuiza(expresion) : new NodoQuiza();
                                                RESULT = nodo;
                                            :}
                                            |expresionRegular:expresion CERO_O_MAS_VECES {:
                                                Nodo nodo = (expresion != null)? new NodoAst(expresion) : new NodoAst();
                                                RESULT = nodo;
                                            :}
                                            |expresionRegular:expresion UNA_O_MAS_VECES {:
                                                Nodo nodo = (expresion != null)? new NodoMas(expresion) : new NodoMas();
                                                RESULT = nodo;
                                            :}
                                            |expresionRegular:expresionIzquierda O expresionRegular:expresionDerecha {:
                                                Nodo nodo = new NodoDis();
                                                if(expresionIzquierda != null && expresionDerecha != null){
                                                    nodo = new NodoDis(expresionIzquierda, expresionDerecha);
                                                }
                                                RESULT = nodo;
                                            :}
                                            |expresionRegular:expresionIzquierda expresionRegular:expresionDerecha {:
                                                Nodo nodo = new NodoConcat();
                                                if(expresionIzquierda != null && expresionDerecha != null){
                                                    nodo = new NodoConcat(expresionIzquierda, expresionDerecha);
                                                }
                                                RESULT = nodo;
                                            :}
                                            |RANGO_LETRAS_MIN:valor {:
                                                Nodo nodo = generadorAutomata.agregarRango(valor, 0);
                                                RESULT = nodo;
                                            :}
                                            |RANGO_NUMEROS:valor {:
                                                Nodo nodo = generadorAutomata.agregarRango(valor, 1);
                                                RESULT = nodo;
                                            :}
                                            |SALTO_DE_LINEA {:
                                                Nodo nodo = new NodoHoja('\n');
                                                RESULT = nodo;
                                            :}
                                            |TABULACION {:
                                                Nodo nodo = new NodoHoja('\t');
                                                RESULT = nodo;
                                            :}
                                            |RETORNO {:
                                                Nodo nodo = new NodoHoja('\b');
                                                RESULT = nodo;
                                            :}
                                            |COR_A expresionRegular:expresion COR_C {:
                                                Nodo nodo = new NodoHoja();
                                                if(expresion != null) nodo = expresion;
                                                RESULT = nodo;
                                            :}
                                            |PAR_A expresionRegular:expresion PAR_C {:
                                                Nodo nodo = new NodoHoja();
                                                if(expresion != null) nodo = expresion;
                                                RESULT = expresion;
                                            :}
                                            |CARACTER_EXPLICITO:caracter {:
                                                Nodo nodo = new NodoHoja();
                                                if(caracter != null) nodo = new NodoHoja(caracter.charAt(0));
                                                RESULT = nodo;
                                            :}
                                            |CADENA:cadena {:
                                                Nodo nodo = new NodoConcat();
                                                if(cadena != null) nodo = generadorAutomata.agregarCadena(cadena.substring(1, cadena.length()-1));
                                                cadenasTemporales.add(cadena.substring(1,cadena.length()-1));
                                                RESULT = nodo;
                                            :}
                                            |ENTERO:valor {:
                                                Nodo nodo = new NodoHoja();
                                                if(valor != null) nodo = generadorAutomata.agregarCadena(valor);
                                                cadenasTemporales.add(valor);
                                                RESULT = nodo;
                                            :}
                                            |VERSION:valor {:
                                                Nodo nodo = new NodoHoja();
                                                if(valor != null) nodo = generadorAutomata.agregarCadena(valor);
                                                cadenasTemporales.add(valor);
                                                RESULT = nodo;
                                            :}
                                            |ID_T:valor {:
                                                Nodo nodo = new NodoHoja();
                                                if(!expresionesRegulares.verificarDisponibilidad(valor)){
                                                    Nodo nuevo = (Nodo) expresionesRegulares.getVariable(valor).getValor();
                                                    if(nuevo instanceof NodoConcat){
                                                        nodo = new NodoConcat((NodoConcat) nuevo);
                                                    }else if(nuevo instanceof NodoDis){
                                                        nodo = new NodoDis((NodoDis) nuevo);
                                                    }else if(nuevo instanceof NodoMas){
                                                        nodo = new NodoMas((NodoMas) nuevo);
                                                    }else if(nuevo instanceof NodoQuiza){
                                                        nodo = new NodoQuiza((NodoQuiza)nuevo);
                                                    }else if(nuevo instanceof NodoHoja){
                                                        nodo = new NodoHoja((NodoHoja) nuevo);
                                                    }
                                                }else{
                                                    listErrores.add("Error: No existe una expresion regular con el identificador: '"+valor+"' declarado en <Linea: "+valorleft+", Columna: "+valorright+">");
                                                    nodo = new NodoHoja();
                                                }
                                                RESULT = nodo;
                                            :}
                                            ;


seccionSimbolos::=                          declaracionesSimbolos SEPARADOR seccionGramatica {:
                                                generadorParser.verificarIntegridad(listErrores, expresionesRegulares, simbolosGramatica);
                                            :}
                                            |error SEPARADOR seccionGramatica {:
                                                generadorParser.verificarIntegridad(listErrores, expresionesRegulares, simbolosGramatica);
                                            :}
                                            ;

declaracionesSimbolos::=                    declaracionesSimbolos declaracionSimbolo
                                            |declaracionSimbolo
                                            ;

declaracionSimbolo::=                       PR_TERMINAL tipoSimbolo listadoIdsMinus:listadoIds FIN_DE_LINEA {:
                                                if(listadoIds == null) listadoIds = new ArrayList();
                                                for(String id : listadoIds){
                                                    simbolosGramatica.addVariable(new Variable(id, new Simbolo(id, false)));
                                                }
                                            :}
                                            |PR_NO PR_TERMINAL tipoSimbolo listadoIdsMayus:listadoIds FIN_DE_LINEA{:
                                                if(listadoIds == null) listadoIds = new ArrayList();
                                                for(String id : listadoIds){
                                                    simbolosGramatica.addVariable(new Variable(id, new Simbolo(id, false)));
                                                }
                                            :}
                                            |error FIN_DE_LINEA
                                            ;

seccionGramatica::=                         seccionGramatica produccion
                                            |produccion
                                            ;

produccion::=                               ID_NT:parteIzquierda ASIGNACION_GRAMA listadoSimbolos:parteDerecha codigoJava FIN_DE_LINEA {:
                                                if(parteIzquierda != null && parteDerecha != null){
                                                    Produccion produccion = new Produccion((Simbolo) simbolosGramatica.getVariable(parteIzquierda).getValor(), (ArrayList<Simbolo>)parteDerecha);
                                                    generadorParser.getProducciones().add(produccion);
                                                }
                                            :}
                                            |ID_NT:parteIzquierda FIN_DE_LINEA {:
                                                if(parteIzquierda != null){
                                                    Produccion produccion = new Produccion((Simbolo) simbolosGramatica.getVariable(parteIzquierda).getValor(), new ArrayList<Simbolo>());
                                                    generadorParser.getProducciones().add(produccion);
                                                }   
                                            :}
                                            |error FIN_DE_LINEA
                                            ;

listadoSimbolos::=                          listadoSimbolos:listadoSimbolos simboloProduccion:simbolo {:
                                                if(listadoSimbolos == null) listadoSimbolos = new ArrayList();
                                                if(simbolo != null) listadoSimbolos.add(simbolo);
                                                RESULT = listadoSimbolos;
                                            :}
                                            |simboloProduccion:simbolo {:
                                                List<Simbolo> simbolos = new ArrayList();
                                                if(simbolo != null) simbolos.add(simbolo);
                                                RESULT = simbolos;
                                            :}
                                            ;

simboloProduccion::=                        ID:id ASIGNACION_INF ID {:
                                                Simbolo simbolo = (Simbolo) simbolosGramatica.getVariable(id).getValor();
                                                RESULT = simbolo;
                                            :}
                                            |ID:id {:
                                                Simbolo simbolo = (Simbolo) simbolosGramatica.getVariable(id).getValor();
                                                RESULT = simbolo;
                                            :}
                                            ;

idCompuesto::=                              idCompuesto ID
                                            |ID
                                            ;

tipoSimbolo::=                              PR_ENTERO
                                            |PR_REAL
                                            |PR_CADENA
                                            |
                                            ;

listadoIdsMinus::=                          listadoIdsMinus:listado COMA ID_T:id {:
                                                if(listado == null) listado = new ArrayList();
                                                if(simbolosGramatica.getVariable(id) != null){
                                                    listErrores.add("Error: ya existe un simbolo con el identificador: '"+id+"' declarado en <Linea: "+idleft+", Columna: "+idright+">");
                                                }else{
                                                    if(id != null) listado.add(id);
                                                }
                                                RESULT = listado;
                                            :}
                                            |ID_T:id {:
                                                List<String> listado = new ArrayList();
                                                if(simbolosGramatica.getVariable(id) != null){
                                                    listErrores.add("Error: ya existe un simbolo con el identificador: '"+id+"' declarado en <Linea: "+idleft+", Columna: "+idright+">");
                                                }else{
                                                    if(id != null) listado.add(id);
                                                }
                                                RESULT = listado;
                                            :}
                                            ;

listadoIdsMayus::=                          listadoIdsMayus:listado COMA ID_NT:id {:
                                                if(listado == null) listado = new ArrayList();
                                                if(simbolosGramatica.getVariable(id) != null){
                                                    listErrores.add("Error: ya existe un simbolo con el identificador: '"+id+"' declarado en <Linea: "+idleft+", Columna: "+idright+">");
                                                }else{
                                                    if(id != null) listado.add(id);
                                                }
                                                RESULT = listado;
                                            :}
                                            |ID_NT:id {:
                                                List<String> listado = new ArrayList();
                                                if(simbolosGramatica.getVariable(id) != null){
                                                    listErrores.add("Error: ya existe un simbolo con el identificador: '"+id+"' declarado en <Linea: "+idleft+", Columna: "+idright+">");
                                                }else{
                                                    if(id != null) listado.add(id);
                                                }
                                                RESULT = listado;
                                            :}
                                            ;

codigoJava::=                               JAVA_CODE
                                            |
                                            ;